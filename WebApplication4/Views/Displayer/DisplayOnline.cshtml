@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <style>
        #currentDot {
            height: 8px;
            width: 8px;
            background-color: red;
            color: blue;
            border-radius: 50%;
            display: inline-block;
            position: center;
            box-shadow: 0 0 0 2px;
            position: absolute;
        }

        #draws {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url("/Map/map.png");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center center;
        }
    </style>
</head>

<body>
    <canvas id="draws"></canvas>
    <h1 id="lon"></h1>
    <h1 id="lat"></h1>
    <div id="currentDot"></div>
    <script>

        class Point {
            constructor() {
                this.x = 0;
                this.y = 0;
            }
            set X(newX) {
                this.x = newX;
            }
            set Y(newY) {
                this.y = newY;
            }
            get X() {
                return this.x;
            }
            get Y() {
                return this.y;
            }
        }

        var onlineController = (function () {
            var notFirstTime = false;
            var lastBeforeCurrentPoint = new Point();
            var currentPoint = new Point();
            var params = { query: "/position/longitude-deg,/position/latitude-deg" };
            var canvas = document.getElementById("draws");
            var ctx = canvas.getContext("2d");
            var counter = 0;
            ctx.strokeStyle = "red";

            function GetNewCurrentLocation() {
                $.post("@Url.Action("QueryData")", params).done(function (locationString) {
                    var location = locationString.split(',');
                    $("#lon").html(parseFloat(location[0]));
                    $("#lat").html(parseFloat(location[1]));
                    lastBeforeCurrentPoint.X = currentPoint.X;
                    lastBeforeCurrentPoint.Y = currentPoint.Y;
                    currentPoint.X = parseFloat(location[0]);
                    currentPoint.Y = parseFloat(location[1]);
                });
            }

            function DrawFromLastToCurrentLine() {
                ctx.moveTo(lastBeforeCurrentPoint.X, lastBeforeCurrentPoint.Y);
                ctx.quadraticCurveTo(lastBeforeCurrentPoint.X, lastBeforeCurrentPoint.Y, currentPoint.X, currentPoint.Y);
                ctx.stroke();
            }

            function UpdateCurrentLocation() {
                var fromTop = (currentPoint.X + 90) / 180 * 100;
                var fromRight = (currentPoint.Y + 180) / 360 * 100;
                $("#currentDot").css({ top: fromTop.valueOf().toString() + "%", right: fromRight.valueOf().toString() + "%" });
            }

            function UpdateCanvas() {
                $("#lon").text(counter);
                counter++;
                GetNewCurrentLocation();
                if (notFirstTime) {
                    DrawFromLastToCurrentLine();
                } else {
                    notFirstTime = true;
                }
                UpdateCurrentLocation();
            }

            return {
                UpdateCanvas: UpdateCanvas
            };
        })();

        if (@ViewBag.rate != 0) {
            var intervalTime = 1000 / @ViewBag.rate;
            setInterval(onlineController.UpdateCanvas, intervalTime);

        }

        onlineController.UpdateCanvas();

    </script>
</body>
</html>
